return {
  -- {
  --   "LazyVim/LazyVim",
  --   opts = {
  --     -- colorscheme = "sweetie",
  --   },
  -- },
  {
    "neanias/everforest-nvim",
    version = false,
    lazy = false,
    priority = 1000, -- make sure to load this before all the other start plugins
    -- Optional; default configuration will be used if setup isn't called.
    config = function()
      require("everforest").setup({
        ---Controls the "hardness" of the background. Options are "soft", "medium" or "hard".
        ---Default is "medium".
        background = "soft",
        ---How much of the background should be transparent. 2 will have more UI
        ---components be transparent (e.g. status line background)
        transparent_background_level = 0,
        ---Whether italics should be used for keywords and more.
        italics = true,
        ---Disable italic fonts for comments. Comments are in italics by default, set
        ---this to `true` to make them _not_ italic!
        disable_italic_comments = false,
        ---By default, the colour of the sign column background is the same as the as normal text
        ---background, but you can use a grey background by setting this to `"grey"`.
        sign_column_background = "grey",
        ---The contrast of line numbers, indent lines, etc. Options are `"high"` or
        ---`"low"` (default).
        ui_contrast = "high",
        ---Dim inactive windows. Only works in Neovim. Can look a bit weird with Telescope.
        ---
        ---When this option is used in conjunction with show_eob set to `false`, the
        ---end of the buffer will only be hidden inside the active window. Inside
        ---inactive windows, the end of buffer filler characters will be visible in
        ---dimmed symbols. This is due to the way Vim and Neovim handle `EndOfBuffer`.
        dim_inactive_windows = false,
        ---Some plugins support highlighting error/warning/info/hint texts, by
        ---default these texts are only underlined, but you can use this option to
        ---also highlight the background of them.
        diagnostic_text_highlight = true,
        ---Which colour the diagnostic text should be. Options are `"grey"` or `"coloured"` (default)
        diagnostic_virtual_text = "coloured",
        ---Some plugins support highlighting error/warning/info/hint lines, but this
        ---feature is disabled by default in this colour scheme.
        diagnostic_line_highlight = true,
        ---By default, this color scheme won't colour the foreground of |spell|, instead
        ---colored under curls will be used. If you also want to colour the foreground,
        ---set this option to `true`.
        spell_foreground = false,
        ---Whether to show the EndOfBuffer highlight.
        show_eob = true,
        ---Style used to make floating windows stand out from other windows. `"bright"`
        ---makes the background of these windows lighter than |hl-Normal|, whereas
        ---`"dim"` makes it darker.
        ---
        ---Floating windows include for instance diagnostic pop-ups, scrollable
        ---documentation windows from completion engines, overlay windows from
        ---installers, etc.
        ---
        ---NB: This is only significant for dark backgrounds as the light palettes
        ---have the same colour for both values in the switch.
        float_style = "bright",
        ---You can override specific highlights to use other groups or a hex colour.
        ---This function will be called with the highlights and colour palette tables.
        ---@param highlight_groups Highlights
        ---@param palette Palette
        on_highlights = function(highlight_groups, palette) end,
        ---You can override colours in the palette to use different hex colours.
        ---This function will be called once the base and background colours have
        ---been mixed on the palette.
        ---@param palette Palette
        colours_override = function(palette) end,
        -- Your config here
      })
    end,
  },
  -- {
  --   "rmehri01/onenord.nvim",
  --   config = function()
  --     local colors = require("onenord.colors").load()
  --     require("onenord").setup({
  --       theme = dark, -- "dark" or "light". Alternatively, remove the option and set vim.o.background instead
  --       borders = true, -- Split window borders
  --       fade_nc = true, -- Fade non-current windows, making them more distinguishable
  --       -- Style that is applied to various groups: see `highlight-args` for options
  --       styles = {
  --         comments = "italic",
  --         strings = "NONE",
  --         keywords = "bold,italic",
  --         functions = "bold",
  --         variables = "NONE",
  --         diagnostics = "bold",
  --       },
  --       disable = {
  --         background = false, -- Disable setting the background color
  --         float_background = true, -- Disable setting the background color for floating windows
  --         cursorline = false, -- Disable the cursorline
  --         eob_lines = true, -- Hide the end-of-buffer lines
  --       },
  --       -- Inverse highlight for different groups
  --       inverse = {
  --         match_paren = false,
  --       },
  --       custom_highlights = {
  --         DiagnosticUnderlineError = { fg = "#ff66cc", bg = colors.none },
  --         ["@DiagnosticUnderlineError"] = { fg = "#ff66cc", bg = colors.none },
  --       }, -- Overwrite default highlight groups
  --       custom_colors = {}, -- Overwrite default colors
  --     })
  --   end,
  -- },
  {
    "catppuccin/nvim",
    name = "catppuccin",
    lazy = false,
    priority = 1000,
    config = function()
      require("catppuccin").setup({
        flavour = "frappe", -- latte, frappe, macchiato, mocha
        transparent_background = false,
        term_colors = true,
        dim_inactive = {
          enabled = false,
          shade = "dark",
          percentage = 0.15,
        },
        styles = {
          comments = { "italic" },
          conditionals = { "bold" },
          loops = { "bold" },
          functions = { "bold", "italic" },
          keywords = { "bold", "italic" },
          strings = {},
          variables = {},
          numbers = {},
          booleans = {},
          properties = {},
          types = {},
          operators = {},
        },
        integrations = {
          barbar = true,
          cmp = true,
          gitsigns = true,
          leap = true,
          neotree = true,
          noice = true,
          notify = true,
          nvimtree = true,
          symbols_outline = true,
          telescope = true,
          treesitter = true,
          rainbow_delimiters = true,
          which_key = true,
          indent_blankline = {
            enabled = true,
            colored_indent_levels = false,
          },
          navic = {
            enabled = true,
            custom_bg = "NONE",
          },
          dap = {
            enabled = true,
            enable_ui = true, -- enable nvim-dap-ui
          },
          window_picker = true,
        },
      })

      vim.cmd.colorscheme("catppuccin")
      vim.cmd.highlight("DiagnosticUnderlineError gui=undercurl") -- use undercurl for error, if supported by terminal
    end,
  },
  {
    "folke/tokyonight.nvim",
    lazy = false,
    priority = 1000,
    opts = {
      styles = {
        -- Style to be applied to different syntax groups
        -- Value is any valid attr-list value for `:help nvim_set_hl`
        comments = { italic = true },
        keywords = { italic = true },
        functions = { bold = true, italic = true },
        variables = {},
        -- Background styles. Can be "dark", "transparent" or "normal"
        sidebars = "dark", -- style for sidebars, see below
        floats = "dark", -- style for floating windows
      },
    },
  },
  -- {
  --   "sainnhe/edge",
  --   lazy = false,
  --   priority = 1000,
  --   config = function()
  --     -- Optionally configure and load the colorscheme
  --     -- directly inside the plugin declaration.
  --     vim.g.edge_enable_italic = true
  --     vim.g.edge_style = "neon"
  --     vim.g.edge_better_performance = 1
  --     -- vim.cmd.colorscheme("edge")
  --   end,
  -- },
  {
    "EdenEast/nightfox.nvim",
    opts = {
      options = {
        styles = { -- Style to be applied to different syntax groups
          comments = "italic", -- Value is any valid attr-list value `:help attr-list`
          conditionals = "italic",
          constants = "italic",
          functions = "italic,bold",
          keywords = "bold",
        },
        inverse = { -- Inverse highlight for different types
          match_paren = false,
          search = true,
        },
      },
    },
    lazy = false,
  },
  {
    "olimorris/onedarkpro.nvim",
    priority = 1000, -- Ensure it loads first
  },
  {
    "rebelot/kanagawa.nvim",

    opts = {
      compile = false, -- enable compiling the colorscheme
      undercurl = true, -- enable undercurls
      commentStyle = { italic = true },
      functionStyle = {},
      keywordStyle = { italic = true },
      statementStyle = { bold = true },
      typeStyle = {},
      transparent = false, -- do not set background color
      dimInactive = false, -- dim inactive window `:h hl-NormalNC`
      terminalColors = true, -- define vim.g.terminal_color_{0,17}
      colors = { -- add/modify theme and palette colors
        palette = {},
        theme = { wave = {}, lotus = {}, dragon = {}, all = {} },
      },
      overrides = function(colors) -- add/modify highlights
        return {}
      end,
      theme = "wave", -- Load "wave" theme when 'background' option is not set
      background = { -- map the value of 'background' option to a theme
        dark = "wave", -- try "dragon" !
        light = "lotus",
      },
    },
  },
  {
    "NTBBloodbath/sweetie.nvim",
    priority = 1000, -- Ensure it loads first
    config = function()
      vim.g.sweetie = {

        pumblend = {
          enable = true,
          transparency_amount = 20,
        },
        overrides = {
          Comment = { italic = true },
          CommentBold = { italic = false },
          Keyword = { bold = true },
          Boolean = { italic = false },
          Class = { italic = false, bold = true },
          -- Optional, just if you use Java and you do not want some extra italics
          -- ["@type.java"] = { italic = false },
          -- ["@type.qualifier.java"] = { italic = false },
        },
      }
      vim.cmd.colorscheme("sweetie")
    end,
  },
}
